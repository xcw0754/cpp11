# decltype关键字

decltype同auto有很多相似的地方，也是用于在编译期自动推导类型，使用起来也是需要小心，它有时并不能推导出如预期一样的类型。


下面讲一些使用方法
-----


有时方便得令人震惊，比如能够推导函数的返回值，而没有真的执行函数。

```
int f() {return 5;}
int a = 6;
decltype(f()) b = a;    // 等同于 int b = a;
```


decltype能推导const、引用、指针。

```
const int a = 5;
decltype(a) d = 4;  // 等同于 const int d = 5;

int b = 6;
decltype(b) e = 4;  // 等同于 int e = 4;

int &c = b;
decltype(c) g = b;  // 等同于 int &g = b;

int *p = &b;
decltype(p) p1 = p; // 等同于 int *p1 = p;
decltype(p) p2 = &b; // 等同于 int *p2 = &b;

const int *const cp = &b;
decltype(cp) p3 = &b;   // 等同于 const int *const p3 = &b;

int *const cp1 = &b;
decltype(cp) p4 = &b;   // 等同于 int *const p4 = &b;
```


有些值得注意的地方。

```
// 只要是使用了*解指针引用，那么结果必然是个引用类型
int a = 8;
int *p = 7;
decltype(*p) b = a;     // 等同于 int &b = a;

// 支持表达式
decltype(2 * 5) c = a;  // 等同于 int c = a;

// 双层括号的结果永远是引用
decltype((2)) d = a;    // 等同于 int &d = a;
```

